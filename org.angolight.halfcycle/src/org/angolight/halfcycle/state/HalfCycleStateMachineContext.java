/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : HalfCycleStateMachineContext.sm
 */

package org.angolight.halfcycle.state;

import org.angolight.kinetic.Kinetic;

public class HalfCycleStateMachineContext
    extends statemap.FSMContext
{
//---------------------------------------------------------------
// Member methods.
//

    public HalfCycleStateMachineContext(HalfCycleStateMachine owner)
    {
        super (HalfCycleMap.ZeroAccelerationState);

        _owner = owner;
    }

    public HalfCycleStateMachineContext(HalfCycleStateMachine owner, HalfCycleStateMachineState initState)
    {
        super (initState);

        _owner = owner;
    }

    public synchronized void enterStartState()
    {
        getState().Entry(this);
        return;
    }

    public synchronized void onKinetic(Kinetic kinetic)
    {
        _transition = "onKinetic";
        getState().onKinetic(this, kinetic);
        _transition = "";
        return;
    }

    public HalfCycleStateMachineState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((HalfCycleStateMachineState) _state);
    }

    protected HalfCycleStateMachine getOwner()
    {
        return (_owner);
    }

    public void setOwner(HalfCycleStateMachine owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private HalfCycleStateMachine _owner;

    public static abstract class HalfCycleStateMachineState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected HalfCycleStateMachineState(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(HalfCycleStateMachineContext context) {}
        protected void Exit(HalfCycleStateMachineContext context) {}

        protected void onKinetic(HalfCycleStateMachineContext context, Kinetic kinetic)
        {
            Default(context);
        }

        protected void Default(HalfCycleStateMachineContext context)
        {
            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //
    }

    /* package */ static abstract class HalfCycleMap
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //
        public static final HalfCycleMap_ZeroAccelerationState ZeroAccelerationState =
            new HalfCycleMap_ZeroAccelerationState("HalfCycleMap.ZeroAccelerationState", 0);
        public static final HalfCycleMap_PositiveAccelerationState PositiveAccelerationState =
            new HalfCycleMap_PositiveAccelerationState("HalfCycleMap.PositiveAccelerationState", 1);
        public static final HalfCycleMap_NegativeAccelerationState NegativeAccelerationState =
            new HalfCycleMap_NegativeAccelerationState("HalfCycleMap.NegativeAccelerationState", 2);
        private static final HalfCycleMap_Default Default =
            new HalfCycleMap_Default("HalfCycleMap.Default", -1);

    }

    protected static class HalfCycleMap_Default
        extends HalfCycleStateMachineState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected HalfCycleMap_Default(String name, int id)
        {
            super (name, id);
        }
    //-----------------------------------------------------------
    // Member data.
    //
    }

    private static final class HalfCycleMap_ZeroAccelerationState
        extends HalfCycleMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private HalfCycleMap_ZeroAccelerationState(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(HalfCycleStateMachineContext context)
            {
                HalfCycleStateMachine ctxt = context.getOwner();

            ctxt.reset();
            return;
        }

        protected void onKinetic(HalfCycleStateMachineContext context, Kinetic kinetic)
        {
            HalfCycleStateMachine ctxt = context.getOwner();

            if (kinetic.getSpeed() <= ctxt.getMinimumSpeedUp())
            {

                // No actions.
            }
            else if (kinetic.getAcceleration() > ctxt.getPositiveAccelerationUp())
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.initilizeHalfCycleSpeed(kinetic.getSpeed());
                    ctxt.updatePositiveH1H2(kinetic.getSpeed());
                }
                finally
                {
                    context.setState(HalfCycleMap.PositiveAccelerationState);
                    (context.getState()).Entry(context);
                }
            }
            else if (kinetic.getAcceleration() < ctxt.getNegativeAccelerationDown())
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.initilizeHalfCycleSpeed(kinetic.getSpeed());
                    ctxt.updateNegativeH1H2(kinetic.getSpeed());
                }
                finally
                {
                    context.setState(HalfCycleMap.NegativeAccelerationState);
                    (context.getState()).Entry(context);
                }
            }
            else
            {

            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class HalfCycleMap_PositiveAccelerationState
        extends HalfCycleMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private HalfCycleMap_PositiveAccelerationState(String name, int id)
        {
            super (name, id);
        }

        protected void onKinetic(HalfCycleStateMachineContext context, Kinetic kinetic)
        {
            HalfCycleStateMachine ctxt = context.getOwner();

            if (kinetic.getSpeed() <= ctxt.getMinimumSpeedDown())
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.updatePositiveH1H2(kinetic.getSpeed());
                    ctxt.updatePositiveHalfCycle(kinetic.getSpeed(), kinetic.getAcceleration());
                    ctxt.notifyHalfCycle();
                }
                finally
                {
                    context.setState(HalfCycleMap.ZeroAccelerationState);
                    (context.getState()).Entry(context);
                }
            }
            else if (kinetic.getAcceleration() > ctxt.getPositiveAccelerationDown())
            {
                HalfCycleStateMachineState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.updatePositiveH1H2(kinetic.getSpeed());
                    ctxt.updatePositiveHalfCycle(kinetic.getSpeed(), kinetic.getAcceleration());
                }
                finally
                {
                    context.setState(endState);
                }
            }
            else if (kinetic.getAcceleration() > 0)
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.updatePositiveH1H2(kinetic.getSpeed());
                    ctxt.updatePositiveHalfCycle(kinetic.getSpeed(), kinetic.getAcceleration());
                    ctxt.notifyHalfCycle();
                }
                finally
                {
                    context.setState(HalfCycleMap.ZeroAccelerationState);
                    (context.getState()).Entry(context);
                }
            }
            else
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.notifyHalfCycle();
                }
                finally
                {
                    context.setState(HalfCycleMap.ZeroAccelerationState);
                    (context.getState()).Entry(context);
                }
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class HalfCycleMap_NegativeAccelerationState
        extends HalfCycleMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private HalfCycleMap_NegativeAccelerationState(String name, int id)
        {
            super (name, id);
        }

        protected void onKinetic(HalfCycleStateMachineContext context, Kinetic kinetic)
        {
            HalfCycleStateMachine ctxt = context.getOwner();

            if (kinetic.getSpeed() <= ctxt.getMinimumSpeedDown())
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.updateNegativeH1H2(kinetic.getSpeed());
                    ctxt.updateNegativeHalfCycle(kinetic.getSpeed(), kinetic.getAcceleration());
                    ctxt.notifyHalfCycle();
                }
                finally
                {
                    context.setState(HalfCycleMap.ZeroAccelerationState);
                    (context.getState()).Entry(context);
                }
            }
            else if (kinetic.getAcceleration() < ctxt.getNegativeAccelerationUp())
            {
                HalfCycleStateMachineState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.updateNegativeH1H2(kinetic.getSpeed());
                    ctxt.updateNegativeHalfCycle(kinetic.getSpeed(), kinetic.getAcceleration());
                }
                finally
                {
                    context.setState(endState);
                }
            }
            else if (kinetic.getAcceleration() < 0)
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.updateNegativeH1H2(kinetic.getSpeed());
                    ctxt.updateNegativeHalfCycle(kinetic.getSpeed(), kinetic.getAcceleration());
                    ctxt.notifyHalfCycle();
                }
                finally
                {
                    context.setState(HalfCycleMap.ZeroAccelerationState);
                    (context.getState()).Entry(context);
                }
            }
            else
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.notifyHalfCycle();
                }
                finally
                {
                    context.setState(HalfCycleMap.ZeroAccelerationState);
                    (context.getState()).Entry(context);
                }
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
