/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : WatchdogStateMachineContext.sm
 */

package org.avm.device.nomad.watchdog.state;

import java.util.*;

public class WatchdogStateMachineContext
    extends statemap.FSMContext
{
//---------------------------------------------------------------
// Member methods.
//

    public WatchdogStateMachineContext(WatchdogStateMachine owner)
    {
        super (WatchdogMap.Running);

        _owner = owner;
    }

    public WatchdogStateMachineContext(WatchdogStateMachine owner, WatchdogStateMachineState initState)
    {
        super (initState);

        _owner = owner;
    }

    public synchronized void enterStartState()
    {
        getState().Entry(this);
        return;
    }

    public synchronized void powerDown()
    {
        _transition = "powerDown";
        getState().powerDown(this);
        _transition = "";
        return;
    }

    public synchronized void powerUp()
    {
        _transition = "powerUp";
        getState().powerUp(this);
        _transition = "";
        return;
    }

    public synchronized void shutdown()
    {
        _transition = "shutdown";
        getState().shutdown(this);
        _transition = "";
        return;
    }

    public WatchdogStateMachineState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((WatchdogStateMachineState) _state);
    }

    protected WatchdogStateMachine getOwner()
    {
        return (_owner);
    }

    public void setOwner(WatchdogStateMachine owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private WatchdogStateMachine _owner;

    public static abstract class WatchdogStateMachineState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected WatchdogStateMachineState(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(WatchdogStateMachineContext context) {}
        protected void Exit(WatchdogStateMachineContext context) {}

        protected void powerDown(WatchdogStateMachineContext context)
        {
            Default(context);
        }

        protected void powerUp(WatchdogStateMachineContext context)
        {
            Default(context);
        }

        protected void shutdown(WatchdogStateMachineContext context)
        {
            Default(context);
        }

        protected void Default(WatchdogStateMachineContext context)
        {
            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //
    }

    /* package */ static abstract class WatchdogMap
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //
        public static final WatchdogMap_Running Running =
            new WatchdogMap_Running("WatchdogMap.Running", 0);
        public static final WatchdogMap_Waiting Waiting =
            new WatchdogMap_Waiting("WatchdogMap.Waiting", 1);
        public static final WatchdogMap_Halted Halted =
            new WatchdogMap_Halted("WatchdogMap.Halted", 2);
        private static final WatchdogMap_Default Default =
            new WatchdogMap_Default("WatchdogMap.Default", -1);

    }

    protected static class WatchdogMap_Default
        extends WatchdogStateMachineState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected WatchdogMap_Default(String name, int id)
        {
            super (name, id);
        }

        protected void powerDown(WatchdogStateMachineContext context)
        {


            return;
        }

        protected void powerUp(WatchdogStateMachineContext context)
        {


            return;
        }

        protected void shutdown(WatchdogStateMachineContext context)
        {


            return;
        }
    //-----------------------------------------------------------
    // Member data.
    //
    }

    private static final class WatchdogMap_Running
        extends WatchdogMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private WatchdogMap_Running(String name, int id)
        {
            super (name, id);
        }

        protected void powerDown(WatchdogStateMachineContext context)
        {


            (context.getState()).Exit(context);
            context.setState(WatchdogMap.Waiting);
            (context.getState()).Entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class WatchdogMap_Waiting
        extends WatchdogMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private WatchdogMap_Waiting(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(WatchdogStateMachineContext context)
            {
                WatchdogStateMachine ctxt = context.getOwner();

            ctxt.startTimer();
            return;
        }

        protected void Exit(WatchdogStateMachineContext context)
            {
            WatchdogStateMachine ctxt = context.getOwner();

            ctxt.stopTimer();
            return;
        }

        protected void powerUp(WatchdogStateMachineContext context)
        {


            (context.getState()).Exit(context);
            context.setState(WatchdogMap.Running);
            (context.getState()).Entry(context);
            return;
        }

        protected void shutdown(WatchdogStateMachineContext context)
        {


            (context.getState()).Exit(context);
            context.setState(WatchdogMap.Halted);
            (context.getState()).Entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class WatchdogMap_Halted
        extends WatchdogMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private WatchdogMap_Halted(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(WatchdogStateMachineContext context)
            {
                WatchdogStateMachine ctxt = context.getOwner();

            ctxt.shutdownCallback();
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
