package org.avm.elementary.management.core;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Enumeration;
import java.util.Properties;

import org.osgi.framework.Bundle;
import org.osgi.framework.BundleContext;
import org.osgi.framework.ServiceReference;
import org.osgi.service.packageadmin.PackageAdmin;
import org.osgi.service.startlevel.StartLevel;

/**
 * 
 * @author didier.lallemand@mercur.fr
 * 
 */
public class ManagementImpl implements Management {
	private static int MAX_RETRY;

	private static boolean DEBUG;

	private int _retry = 1;

	private BundleContext _context;

	private SynchronizeBundleThread _synchronizeBundlesThread;

	private Management _instance;

	private StartLevel _startLevelService = null;

	private PackageAdmin _packageAdminService = null;

	/**
	 * @param context
	 *            TODO
	 * 
	 */
	public ManagementImpl() {
		_instance = this;
	}

	public void setBundleContext(BundleContext context) {
		_context = context;
		ServiceReference sr;

		sr = context.getServiceReference(StartLevel.class.getName());
		_startLevelService = (StartLevel) context.getService(sr);

		sr = context.getServiceReference(PackageAdmin.class.getName());
		_packageAdminService = (PackageAdmin) context.getService(sr);
	}

	public void start() {
		DEBUG = Boolean.valueOf(System.getProperty("org.avm.debug", "false"))
				.booleanValue();
		boolean update = System.getProperty(
				"org.avm.elementary.management.core.autoupdate", "true")
				.equals("true");
		init();
		if (update) {
			try {
				synchronize(new PrintWriter(System.out));
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	public void stop() {
		unsynchronize();
	}

	public void init() {
		loadProperties("management.properties");
		loadProperties("avm.properties");
	}

	// public urls
	public String getPublicUploadUrl() {
		return System.getProperty("org.avm.upload.public.url",
				"ftp://avm:avm++@ftpserver.avm.org/upload/$u");
	}

	public String getPublicDownloadUrl() {
		return System.getProperty("org.avm.download.public.url",
				"ftp://avm:avm++@ftpserver.avm.org/");
	}

	// private urls
	public String getPrivateUploadUrl() {
		return System.getProperty("org.avm.upload.private.url",
				"ftp://avm:avm++@ftpserver.avm.org/upload/$u");
	}

	public String getPrivateDownloadUrl() {
		return System.getProperty("org.avm.download.private.url",
				"ftp://avm:avm++@ftpserver.avm.org/");
	}

	public void synchronize(PrintWriter out) throws Exception {
		_retry = 1;
		MAX_RETRY = Integer.parseInt(System.getProperty(
				"org.avm.elementary.management.core.autoupdate.maxtry", "3"));

		if (_synchronizeBundlesThread == null
				|| _synchronizeBundlesThread.isAlive() == false) {
			_synchronizeBundlesThread = new SynchronizeBundleThread(out);
			_synchronizeBundlesThread.start();
		}
		else{
			throw new Exception("Management synchronisation already in progress...");
		}
	}

	public void unsynchronize() {
		if (_synchronizeBundlesThread != null) {
			_synchronizeBundlesThread.stop();
			_synchronizeBundlesThread = null;
		}
	}

	class SynchronizeBundleThread implements Runnable {
		private Thread _thread = null;
		
		private PrintWriter _out=null;

		public SynchronizeBundleThread(PrintWriter out) {
			_out = out;
		}

		public void start() {
			if (_thread == null) {
				_thread = new Thread(this);
				_thread.start();
			}
		}

		public void stop() {
			if (_thread != null) {
				_thread.interrupt();
				_thread = null;
			}
		}

		public boolean isAlive() {
			if (_thread != null) {
				return _thread.isAlive();
			} else {
				return false;
			}
		}

		private void debug(String trace) {
			if (DEBUG) {
				_out.println("[ManagementCore] " + trace);
			}
		}

		public void run() {
			int timeBeforeRetry = 3; // secondes

			_out.println("private download url : "
					+ getPrivateDownloadUrl());
			_out.println("public download url : "
					+ getPublicDownloadUrl());
			Bundle[] bundles = _context.getBundles();

			if (bundles.length < 5) {
				// nombre d'essai plus grand si le nombre de bundles installe'
				// est
				// anormalement bas. => INSTALLATION
				MAX_RETRY = Integer.MAX_VALUE;
			}

			while (_retry < MAX_RETRY && _thread.isInterrupted() == false) {
				debug("-------------------------------------------");
				debug("|          running auto update...         |");
				debug("|               try " + _retry + "/" + MAX_RETRY
						+ "                   |");
				debug("-------------------------------------------");
				try {
					SynchronizeBundlesCommand cmd = new SynchronizeBundlesCommand(
							_context, _instance, _out);
					cmd.exec();
					debug("auto update [done]");
					break;
				} catch (IOException ioe) {
					_out.println("[ERROR] AutoUpdate IOException : "
							+ ioe.getMessage());
					int cpt = 0;
					_out.println("[INFO] management.core - Retry in "
							+ timeBeforeRetry + " sec : ");
					while (cpt < timeBeforeRetry) {
						try {
							Thread.sleep(1000);
						} catch (InterruptedException e) {
							break;
						}
						cpt++;
					}
					_retry++;
				}

			}

			_synchronizeBundlesThread = null;
		}

	}

	private void loadProperties(String filename) {
		Properties p;
		String pathfile = null;

		p = new Properties();
		try {
			pathfile = System.getProperty("org.avm.home")
					+ System.getProperty("file.separator") + "bin"
					+ System.getProperty("file.separator") + filename;
			p.load(new FileInputStream(pathfile));
			System.out.println("Loading properties " + filename);
			System.out.println(p);
			Enumeration e = p.keys();
			while (e.hasMoreElements()) {
				String key = (String) e.nextElement();
				System.setProperty(key, p.getProperty(key));
			}
		} catch (FileNotFoundException e) {
			System.err.println("FileNotFoundException (" + e.getMessage()
					+ "): " + pathfile);
		} catch (IOException e) {
			System.err.println("IOException (" + e.getMessage() + "): "
					+ pathfile);
		}
	}

	public StartLevel getStartLevelService() {
		return _startLevelService;
	}

	public PackageAdmin getPackageAdminService() {
		return _packageAdminService;
	}

}