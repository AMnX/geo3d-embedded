/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : AvmStateMachineContext.sm
 */

package org.avm.business.core;


public class AvmStateMachineContext
    extends statemap.FSMContext
    implements java.io.Serializable
{
//---------------------------------------------------------------
// Member methods.
//

    public AvmStateMachineContext(AvmStateMachine owner)
    {
        super (HorsServiceMap.Init);

        _owner = owner;
    }

    public AvmStateMachineContext(AvmStateMachine owner, AvmStateMachineState initState)
    {
        super (initState);

        _owner = owner;
    }

    public synchronized void enterStartState()
    {
        getState().Entry(this);
        return;
    }

    public synchronized void annuler()
    {
        _transition = "annuler";
        getState().annuler(this);
        _transition = "";
        return;
    }

    public synchronized void depart(int balise)
    {
        _transition = "depart";
        getState().depart(this, balise);
        _transition = "";
        return;
    }

    public synchronized void entree(int balise)
    {
        _transition = "entree";
        getState().entree(this, balise);
        _transition = "";
        return;
    }

    public synchronized void finCourse()
    {
        _transition = "finCourse";
        getState().finCourse(this);
        _transition = "";
        return;
    }

    public synchronized void finPoste()
    {
        _transition = "finPoste";
        getState().finPoste(this);
        _transition = "";
        return;
    }

    public synchronized void finService()
    {
        _transition = "finService";
        getState().finService(this);
        _transition = "";
        return;
    }

    public synchronized void priseCourse(int course)
    {
        _transition = "priseCourse";
        getState().priseCourse(this, course);
        _transition = "";
        return;
    }

    public synchronized void prisePoste(int vehiculeReplace, int matriculeReplace)
    {
        _transition = "prisePoste";
        getState().prisePoste(this, vehiculeReplace, matriculeReplace);
        _transition = "";
        return;
    }

    public synchronized void priseService(int service)
    {
        _transition = "priseService";
        getState().priseService(this, service);
        _transition = "";
        return;
    }

    public synchronized void progression(int pourcentage)
    {
        _transition = "progression";
        getState().progression(this, pourcentage);
        _transition = "";
        return;
    }

    public synchronized void sortie(int balise)
    {
        _transition = "sortie";
        getState().sortie(this, balise);
        _transition = "";
        return;
    }

    public synchronized void sortieItineraire()
    {
        _transition = "sortieItineraire";
        getState().sortieItineraire(this);
        _transition = "";
        return;
    }

    public AvmStateMachineState valueOf(int stateId)
        throws ArrayIndexOutOfBoundsException
    {
        return (_States[stateId]);
    }

    public AvmStateMachineState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((AvmStateMachineState) _state);
    }

    protected AvmStateMachine getOwner()
    {
        return (_owner);
    }

    public void setOwner(AvmStateMachine owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

    private void writeObject(java.io.ObjectOutputStream ostream)
        throws java.io.IOException
    {
        int size =
            (_stateStack == null ? 0 : _stateStack.size());
        int i;

        ostream.writeInt(size);

        for (i = 0; i < size; ++i)
        {
            ostream.writeInt(
                ((AvmStateMachineState) _stateStack.get(i)).getId());
        }

        ostream.writeInt(_state.getId());

        return;
    }

    private void readObject(java.io.ObjectInputStream istream)
        throws java.io.IOException
    {
        int size;

        size = istream.readInt();

        if (size == 0)
        {
            _stateStack = null;
        }
        else
        {
            int i;

            _stateStack =
                new java.util.Stack();

            for (i = 0; i < size; ++i)
            {
                _stateStack.add(i, _States[istream.readInt()]);
            }
        }

        _state = _States[istream.readInt()];

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private AvmStateMachine _owner;
    transient private static AvmStateMachineState[] _States =
    {
        HorsServiceMap.Init,
        HorsServiceMap.AttenteSaisieService,
        ServiceNormalMap.AttenteSaisieCourse,
        ServiceNormalMap.AttenteDepart,
        EnCourseMap.HorsItineraire,
        EnCourseMap.ArretSurItineraire,
        EnCourseMap.InterArretSurItineraire,
        ServiceSpecialMap.EnCourse
    };

    public static abstract class AvmStateMachineState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected AvmStateMachineState(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(AvmStateMachineContext context) {}
        protected void Exit(AvmStateMachineContext context) {}

        protected void annuler(AvmStateMachineContext context)
        {
            Default(context);
        }

        protected void depart(AvmStateMachineContext context, int balise)
        {
            Default(context);
        }

        protected void entree(AvmStateMachineContext context, int balise)
        {
            Default(context);
        }

        protected void finCourse(AvmStateMachineContext context)
        {
            Default(context);
        }

        protected void finPoste(AvmStateMachineContext context)
        {
            Default(context);
        }

        protected void finService(AvmStateMachineContext context)
        {
            Default(context);
        }

        protected void priseCourse(AvmStateMachineContext context, int course)
        {
            Default(context);
        }

        protected void prisePoste(AvmStateMachineContext context, int vehiculeReplace, int matriculeReplace)
        {
            Default(context);
        }

        protected void priseService(AvmStateMachineContext context, int service)
        {
            Default(context);
        }

        protected void progression(AvmStateMachineContext context, int pourcentage)
        {
            Default(context);
        }

        protected void sortie(AvmStateMachineContext context, int balise)
        {
            Default(context);
        }

        protected void sortieItineraire(AvmStateMachineContext context)
        {
            Default(context);
        }

        protected void Default(AvmStateMachineContext context)
        {
            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //
    }

    /* package */ static abstract class HorsServiceMap
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //
        public static final HorsServiceMap_Init Init =
            new HorsServiceMap_Init("HorsServiceMap.Init", 0);
        public static final HorsServiceMap_AttenteSaisieService AttenteSaisieService =
            new HorsServiceMap_AttenteSaisieService("HorsServiceMap.AttenteSaisieService", 1);
        private static final HorsServiceMap_Default Default =
            new HorsServiceMap_Default("HorsServiceMap.Default", -1);

    }

    protected static class HorsServiceMap_Default
        extends AvmStateMachineState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected HorsServiceMap_Default(String name, int id)
        {
            super (name, id);
        }

        protected void finService(AvmStateMachineContext context)
        {
            AvmStateMachine ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.actionFinService();
            }
            finally
            {
                context.setState(HorsServiceMap.AttenteSaisieService);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void finPoste(AvmStateMachineContext context)
        {
            AvmStateMachine ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.actionFinService();
                ctxt.actionFinPoste();
            }
            finally
            {
                context.setState(HorsServiceMap.Init);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void priseService(AvmStateMachineContext context, int service)
        {
            AvmStateMachine ctxt = context.getOwner();

            AvmStateMachineState endState = context.getState();

            context.clearState();
            try
            {
                ctxt.actionService(false, service);
            }
            finally
            {
                context.setState(endState);
            }
            return;
        }
    //-----------------------------------------------------------
    // Member data.
    //
    }

    private static final class HorsServiceMap_Init
        extends HorsServiceMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private HorsServiceMap_Init(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(AvmStateMachineContext context)
            {
                AvmStateMachine ctxt = context.getOwner();

            ctxt.stateChange(AvmModel.STATE_INITIAL);
            ctxt.checkPlanification();
            ctxt.resetService();
            ctxt.resetCourse();
            ctxt.serialize();
            return;
        }

        protected void prisePoste(AvmStateMachineContext context, int vehiculeReplace, int matriculeReplace)
        {
            AvmStateMachine ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.actionPrisePoste(vehiculeReplace, matriculeReplace);
            }
            finally
            {
                context.setState(HorsServiceMap.AttenteSaisieService);
                (context.getState()).Entry(context);
            }
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class HorsServiceMap_AttenteSaisieService
        extends HorsServiceMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private HorsServiceMap_AttenteSaisieService(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(AvmStateMachineContext context)
            {
                AvmStateMachine ctxt = context.getOwner();

            ctxt.stateChange(AvmModel.STATE_ATTENTE_SAISIE_SERVICE);
            ctxt.resetService();
            ctxt.resetCourse();
            ctxt.checkPlanification();
            ctxt.serialize();
            ctxt.checkForcePriseService();
            return;
        }

        protected void Exit(AvmStateMachineContext context)
            {
            AvmStateMachine ctxt = context.getOwner();

            ctxt.showMessage();
            return;
        }

        protected void annuler(AvmStateMachineContext context)
        {
            AvmStateMachine ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.actionAnnuler();
            }
            finally
            {
                context.setState(HorsServiceMap.AttenteSaisieService);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void priseService(AvmStateMachineContext context, int service)
        {
            AvmStateMachine ctxt = context.getOwner();

            if (ctxt.isServiceSpecial(service) == true)
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.actionService(true, service);
                }
                finally
                {
                    context.setState(ServiceSpecialMap.EnCourse);
                    (context.getState()).Entry(context);
                }
            }
            else if (ctxt.isServiceNormal(service) == true)
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.actionService(true, service);
                }
                finally
                {
                    context.setState(ServiceNormalMap.AttenteSaisieCourse);
                    (context.getState()).Entry(context);
                }
            }            else
            {
                super.priseService(context, service);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    /* package */ static abstract class ServiceNormalMap
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //
        public static final ServiceNormalMap_AttenteSaisieCourse AttenteSaisieCourse =
            new ServiceNormalMap_AttenteSaisieCourse("ServiceNormalMap.AttenteSaisieCourse", 2);
        public static final ServiceNormalMap_AttenteDepart AttenteDepart =
            new ServiceNormalMap_AttenteDepart("ServiceNormalMap.AttenteDepart", 3);
        private static final ServiceNormalMap_Default Default =
            new ServiceNormalMap_Default("ServiceNormalMap.Default", -1);

    }

    protected static class ServiceNormalMap_Default
        extends AvmStateMachineState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected ServiceNormalMap_Default(String name, int id)
        {
            super (name, id);
        }

        protected void sortie(AvmStateMachineContext context, int balise)
        {


            return;
        }

        protected void entree(AvmStateMachineContext context, int balise)
        {


            return;
        }

        protected void finCourse(AvmStateMachineContext context)
        {
            AvmStateMachine ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.stopSuiviItineraire();
                ctxt.actionFinCourse();
            }
            finally
            {
                context.setState(ServiceNormalMap.AttenteSaisieCourse);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void finService(AvmStateMachineContext context)
        {
            AvmStateMachine ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.stopSuiviItineraire();
                ctxt.actionFinCourse();
                ctxt.actionFinService();
            }
            finally
            {
                context.setState(HorsServiceMap.AttenteSaisieService);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void finPoste(AvmStateMachineContext context)
        {
            AvmStateMachine ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.stopSuiviItineraire();
                ctxt.actionFinCourse();
                ctxt.actionFinService();
                ctxt.actionFinPoste();
            }
            finally
            {
                context.setState(HorsServiceMap.Init);
                (context.getState()).Entry(context);
            }
            return;
        }
    //-----------------------------------------------------------
    // Member data.
    //
    }

    private static final class ServiceNormalMap_AttenteSaisieCourse
        extends ServiceNormalMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ServiceNormalMap_AttenteSaisieCourse(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(AvmStateMachineContext context)
            {
                AvmStateMachine ctxt = context.getOwner();

            ctxt.stateChange(AvmModel.STATE_ATTENTE_SAISIE_COURSE);
            ctxt.checkPlanification();
            ctxt.checkCourse();
            ctxt.resetCourse();
            ctxt.serialize();
            ctxt.checkAutomaticCourse();
            return;
        }

        protected void annuler(AvmStateMachineContext context)
        {
            AvmStateMachine ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.actionAnnuler();
            }
            finally
            {
                context.setState(HorsServiceMap.AttenteSaisieService);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void finCourse(AvmStateMachineContext context)
        {


            return;
        }

        protected void priseCourse(AvmStateMachineContext context, int course)
        {
            AvmStateMachine ctxt = context.getOwner();

            if (ctxt.isCourseCorrect(course) == true)
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.actionCourse(true, course);
                }
                finally
                {
                    context.setState(ServiceNormalMap.AttenteDepart);
                    (context.getState()).Entry(context);
                }
            }
            else
            {
                AvmStateMachineState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.actionCourse(false, course);
                }
                finally
                {
                    context.setState(endState);
                }
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class ServiceNormalMap_AttenteDepart
        extends ServiceNormalMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ServiceNormalMap_AttenteDepart(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(AvmStateMachineContext context)
            {
                AvmStateMachine ctxt = context.getOwner();

            ctxt.stateChange(AvmModel.STATE_ATTENTE_DEPART);
            ctxt.checkPlanification();
            ctxt.startSuiviItineraire();
            ctxt.serialize();
            return;
        }

        protected void annuler(AvmStateMachineContext context)
        {
            AvmStateMachine ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.actionAnnuler();
            }
            finally
            {
                context.setState(ServiceNormalMap.AttenteSaisieCourse);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void depart(AvmStateMachineContext context, int balise)
        {
            AvmStateMachine ctxt = context.getOwner();

            if (ctxt.isArret(balise) == true)
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.actionEntreeArret(balise);
                    ctxt.actionDepart();
                }
                finally
                {
                    context.setState(EnCourseMap.ArretSurItineraire);
                    (context.getState()).Entry(context);
                }
            }
            else if (ctxt.isArret(balise) == false)
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.actionDepart();
                }
                finally
                {
                    context.setState(EnCourseMap.HorsItineraire);
                    (context.getState()).Entry(context);
                }
            }            else
            {
                super.depart(context, balise);
            }

            return;
        }

        protected void entree(AvmStateMachineContext context, int balise)
        {
            AvmStateMachine ctxt = context.getOwner();

            if (ctxt.isTerminusDepart(balise) == true)
            {
                AvmStateMachineState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.actionEntreeArret(balise);
                }
                finally
                {
                    context.setState(endState);
                }
            }
            else
            {
                super.entree(context, balise);
            }

            return;
        }

        protected void sortie(AvmStateMachineContext context, int balise)
        {
            AvmStateMachine ctxt = context.getOwner();

            if (ctxt.isTerminusDepart(balise) && ctxt.isArretCourant(balise))
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.actionDepart();
                    ctxt.actionSortieArret(balise);
                }
                finally
                {
                    context.setState(EnCourseMap.InterArretSurItineraire);
                    (context.getState()).Entry(context);
                }
            }
            else if (ctxt.isTerminusDepart(balise) && ! ctxt.isArretCourant(balise))
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.actionDepart();
                    ctxt.actionEntreeArret(balise);
                    ctxt.actionSortieArret(balise);
                }
                finally
                {
                    context.setState(EnCourseMap.InterArretSurItineraire);
                    (context.getState()).Entry(context);
                }
            }            else
            {
                super.sortie(context, balise);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    /* package */ static abstract class EnCourseMap
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //
        public static final EnCourseMap_HorsItineraire HorsItineraire =
            new EnCourseMap_HorsItineraire("EnCourseMap.HorsItineraire", 4);
        public static final EnCourseMap_ArretSurItineraire ArretSurItineraire =
            new EnCourseMap_ArretSurItineraire("EnCourseMap.ArretSurItineraire", 5);
        public static final EnCourseMap_InterArretSurItineraire InterArretSurItineraire =
            new EnCourseMap_InterArretSurItineraire("EnCourseMap.InterArretSurItineraire", 6);
        private static final EnCourseMap_Default Default =
            new EnCourseMap_Default("EnCourseMap.Default", -1);

    }

    protected static class EnCourseMap_Default
        extends AvmStateMachineState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected EnCourseMap_Default(String name, int id)
        {
            super (name, id);
        }

        protected void sortie(AvmStateMachineContext context, int balise)
        {


            return;
        }

        protected void entree(AvmStateMachineContext context, int balise)
        {


            return;
        }

        protected void finCourse(AvmStateMachineContext context)
        {
            AvmStateMachine ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.stopSuiviItineraire();
                ctxt.actionFinCourse();
            }
            finally
            {
                context.setState(ServiceNormalMap.AttenteSaisieCourse);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void finService(AvmStateMachineContext context)
        {
            AvmStateMachine ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.stopSuiviItineraire();
                ctxt.actionFinCourse();
                ctxt.actionFinService();
            }
            finally
            {
                context.setState(HorsServiceMap.AttenteSaisieService);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void finPoste(AvmStateMachineContext context)
        {
            AvmStateMachine ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.stopSuiviItineraire();
                ctxt.actionFinCourse();
                ctxt.actionFinService();
                ctxt.actionFinPoste();
            }
            finally
            {
                context.setState(HorsServiceMap.Init);
                (context.getState()).Entry(context);
            }
            return;
        }
    //-----------------------------------------------------------
    // Member data.
    //
    }

    private static final class EnCourseMap_HorsItineraire
        extends EnCourseMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private EnCourseMap_HorsItineraire(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(AvmStateMachineContext context)
            {
                AvmStateMachine ctxt = context.getOwner();

            ctxt.stateChange(AvmModel.STATE_EN_COURSE_HORS_ITINERAIRE);
            ctxt.checkSuiviItineraire();
            ctxt.entryHorsItineraire();
            return;
        }

        protected void Exit(AvmStateMachineContext context)
            {
            AvmStateMachine ctxt = context.getOwner();

            ctxt.exitHorsItineraire();
            return;
        }

        protected void entree(AvmStateMachineContext context, int balise)
        {
            AvmStateMachine ctxt = context.getOwner();

            if (ctxt.isArretEnAval(balise)==true )
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.actionFinHorsItineraire(balise);
                }
                finally
                {
                    context.setState(EnCourseMap.ArretSurItineraire);
                    (context.getState()).Entry(context);
                }
            }
            else
            {
                super.entree(context, balise);
            }

            return;
        }

        protected void sortie(AvmStateMachineContext context, int balise)
        {
            AvmStateMachine ctxt = context.getOwner();

            if (ctxt.isArretCourant(balise) == true)
            {
                AvmStateMachineState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.actionSortieArret(balise);
                }
                finally
                {
                    context.setState(endState);
                }
            }
            else
            {
                super.sortie(context, balise);
            }

            return;
        }

        protected void sortieItineraire(AvmStateMachineContext context)
        {


            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class EnCourseMap_ArretSurItineraire
        extends EnCourseMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private EnCourseMap_ArretSurItineraire(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(AvmStateMachineContext context)
            {
                AvmStateMachine ctxt = context.getOwner();

            ctxt.stateChange(AvmModel.STATE_EN_COURSE_ARRET_SUR_ITINERAIRE);
            ctxt.checkSuiviItineraire();
            ctxt.serialize();
            return;
        }

        protected void entree(AvmStateMachineContext context, int balise)
        {
            AvmStateMachine ctxt = context.getOwner();

            if (ctxt.isProchainArret(balise) == true)
            {
                AvmStateMachineState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.actionEntreeArret(balise);
                }
                finally
                {
                    context.setState(endState);
                }
            }
            else
            {
                super.entree(context, balise);
            }

            return;
        }

        protected void finCourse(AvmStateMachineContext context)
        {
            AvmStateMachine ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.actionSortieArret();
                ctxt.actionFinCourse();
            }
            finally
            {
                context.setState(ServiceNormalMap.AttenteSaisieCourse);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void sortie(AvmStateMachineContext context, int balise)
        {
            AvmStateMachine ctxt = context.getOwner();

            if (ctxt.isTerminusArrivee(balise) == true)
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.actionSortieArret();
                    ctxt.actionFinCourse();
                }
                finally
                {
                    context.setState(ServiceNormalMap.AttenteSaisieCourse);
                    (context.getState()).Entry(context);
                }
            }
            else if (ctxt.isArretCourant(balise) == true)
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.actionSortieArret(balise);
                }
                finally
                {
                    context.setState(EnCourseMap.InterArretSurItineraire);
                    (context.getState()).Entry(context);
                }
            }            else
            {
                super.sortie(context, balise);
            }

            return;
        }

        protected void sortieItineraire(AvmStateMachineContext context)
        {
            AvmStateMachine ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.actionSortieItineraire();
            }
            finally
            {
                context.setState(EnCourseMap.HorsItineraire);
                (context.getState()).Entry(context);
            }
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class EnCourseMap_InterArretSurItineraire
        extends EnCourseMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private EnCourseMap_InterArretSurItineraire(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(AvmStateMachineContext context)
            {
                AvmStateMachine ctxt = context.getOwner();

            ctxt.stateChange(AvmModel.STATE_EN_COURSE_INTERARRET_SUR_ITINERAIRE);
            ctxt.checkSuiviItineraire();
            return;
        }

        protected void entree(AvmStateMachineContext context, int balise)
        {
            AvmStateMachine ctxt = context.getOwner();

            if (ctxt.isProchainArret(balise) == true)
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.actionEntreeArret(balise);
                }
                finally
                {
                    context.setState(EnCourseMap.ArretSurItineraire);
                    (context.getState()).Entry(context);
                }
            }
            else if (ctxt.isArret(balise) && ctxt.isGeorefMode() )
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.actionEntreeArret(balise);
                }
                finally
                {
                    context.setState(EnCourseMap.ArretSurItineraire);
                    (context.getState()).Entry(context);
                }
            }            else
            {
                super.entree(context, balise);
            }

            return;
        }

        protected void progression(AvmStateMachineContext context, int pourcentage)
        {
            AvmStateMachine ctxt = context.getOwner();

            AvmStateMachineState endState = context.getState();

            context.clearState();
            try
            {
                ctxt.notifyProgression(pourcentage);
            }
            finally
            {
                context.setState(endState);
            }
            return;
        }

        protected void sortieItineraire(AvmStateMachineContext context)
        {
            AvmStateMachine ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.actionSortieItineraire();
            }
            finally
            {
                context.setState(EnCourseMap.HorsItineraire);
                (context.getState()).Entry(context);
            }
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    /* package */ static abstract class ServiceSpecialMap
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //
        public static final ServiceSpecialMap_EnCourse EnCourse =
            new ServiceSpecialMap_EnCourse("ServiceSpecialMap.EnCourse", 7);
        private static final ServiceSpecialMap_Default Default =
            new ServiceSpecialMap_Default("ServiceSpecialMap.Default", -1);

    }

    protected static class ServiceSpecialMap_Default
        extends AvmStateMachineState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected ServiceSpecialMap_Default(String name, int id)
        {
            super (name, id);
        }
    //-----------------------------------------------------------
    // Member data.
    //
    }

    private static final class ServiceSpecialMap_EnCourse
        extends ServiceSpecialMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ServiceSpecialMap_EnCourse(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(AvmStateMachineContext context)
            {
                AvmStateMachine ctxt = context.getOwner();

            ctxt.stateChange(AvmModel.STATE_EN_COURSE_SERVICE_SPECIAL);
            ctxt.entryEnCourseServiceSpecial();
            return;
        }

        protected void annuler(AvmStateMachineContext context)
        {
            AvmStateMachine ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.actionAnnuler();
            }
            finally
            {
                context.setState(HorsServiceMap.AttenteSaisieService);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void finCourse(AvmStateMachineContext context)
        {
            AvmStateMachine ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.actionFinCourse();
            }
            finally
            {
                context.setState(HorsServiceMap.AttenteSaisieService);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void finPoste(AvmStateMachineContext context)
        {
            AvmStateMachine ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.actionFinPoste();
            }
            finally
            {
                context.setState(HorsServiceMap.Init);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void finService(AvmStateMachineContext context)
        {
            AvmStateMachine ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.actionFinService();
            }
            finally
            {
                context.setState(HorsServiceMap.AttenteSaisieService);
                (context.getState()).Entry(context);
            }
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
