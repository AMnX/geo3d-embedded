/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : ConnectionStateMachineContext.sm
 */

package org.avm.elementary.protocol.avm.state;

import java.util.*;
import org.avm.elementary.protocol.avm.parser.Message;

public class ConnectionStateMachineContext
    extends statemap.FSMContext
{
//---------------------------------------------------------------
// Member methods.
//

    public ConnectionStateMachineContext(ConnectionStateMachine owner)
    {
        super (ConnectionMap.Disconnected);

        _owner = owner;
    }

    public ConnectionStateMachineContext(ConnectionStateMachine owner, ConnectionStateMachineState initState)
    {
        super (initState);

        _owner = owner;
    }

    public synchronized void enterStartState()
    {
        getState().Entry(this);
        return;
    }

    public synchronized void acknolege()
    {
        _transition = "acknolege";
        getState().acknolege(this);
        _transition = "";
        return;
    }

    public synchronized void acknolege(Message msg)
    {
        _transition = "acknolege";
        getState().acknolege(this, msg);
        _transition = "";
        return;
    }

    public synchronized void connect()
    {
        _transition = "connect";
        getState().connect(this);
        _transition = "";
        return;
    }

    public synchronized void connected()
    {
        _transition = "connected";
        getState().connected(this);
        _transition = "";
        return;
    }

    public synchronized void connected(Message msg)
    {
        _transition = "connected";
        getState().connected(this, msg);
        _transition = "";
        return;
    }

    public synchronized void disconnect()
    {
        _transition = "disconnect";
        getState().disconnect(this);
        _transition = "";
        return;
    }

    public synchronized void ping()
    {
        _transition = "ping";
        getState().ping(this);
        _transition = "";
        return;
    }

    public synchronized void ping(Message msg)
    {
        _transition = "ping";
        getState().ping(this, msg);
        _transition = "";
        return;
    }

    public synchronized void pong()
    {
        _transition = "pong";
        getState().pong(this);
        _transition = "";
        return;
    }

    public synchronized void pong(Message msg)
    {
        _transition = "pong";
        getState().pong(this, msg);
        _transition = "";
        return;
    }

    public synchronized void receive()
    {
        _transition = "receive";
        getState().receive(this);
        _transition = "";
        return;
    }

    public synchronized void receive(Message msg)
    {
        _transition = "receive";
        getState().receive(this, msg);
        _transition = "";
        return;
    }

    public synchronized void send()
    {
        _transition = "send";
        getState().send(this);
        _transition = "";
        return;
    }

    public synchronized void send(Message msg)
    {
        _transition = "send";
        getState().send(this, msg);
        _transition = "";
        return;
    }

    public ConnectionStateMachineState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((ConnectionStateMachineState) _state);
    }

    protected ConnectionStateMachine getOwner()
    {
        return (_owner);
    }

    public void setOwner(ConnectionStateMachine owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private ConnectionStateMachine _owner;

    public static abstract class ConnectionStateMachineState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected ConnectionStateMachineState(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(ConnectionStateMachineContext context) {}
        protected void Exit(ConnectionStateMachineContext context) {}

        protected void acknolege(ConnectionStateMachineContext context)
        {
            Default(context);
        }

        protected void acknolege(ConnectionStateMachineContext context, Message msg)
        {
            Default(context);
        }

        protected void connect(ConnectionStateMachineContext context)
        {
            Default(context);
        }

        protected void connected(ConnectionStateMachineContext context)
        {
            Default(context);
        }

        protected void connected(ConnectionStateMachineContext context, Message msg)
        {
            Default(context);
        }

        protected void disconnect(ConnectionStateMachineContext context)
        {
            Default(context);
        }

        protected void ping(ConnectionStateMachineContext context)
        {
            Default(context);
        }

        protected void ping(ConnectionStateMachineContext context, Message msg)
        {
            Default(context);
        }

        protected void pong(ConnectionStateMachineContext context)
        {
            Default(context);
        }

        protected void pong(ConnectionStateMachineContext context, Message msg)
        {
            Default(context);
        }

        protected void receive(ConnectionStateMachineContext context)
        {
            Default(context);
        }

        protected void receive(ConnectionStateMachineContext context, Message msg)
        {
            Default(context);
        }

        protected void send(ConnectionStateMachineContext context)
        {
            Default(context);
        }

        protected void send(ConnectionStateMachineContext context, Message msg)
        {
            Default(context);
        }

        protected void Default(ConnectionStateMachineContext context)
        {
            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //
    }

    /* package */ static abstract class ConnectionMap
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //
        public static final ConnectionMap_Disconnected Disconnected =
            new ConnectionMap_Disconnected("ConnectionMap.Disconnected", 0);
        public static final ConnectionMap_Connecting Connecting =
            new ConnectionMap_Connecting("ConnectionMap.Connecting", 1);
        public static final ConnectionMap_Connected Connected =
            new ConnectionMap_Connected("ConnectionMap.Connected", 2);
        private static final ConnectionMap_Default Default =
            new ConnectionMap_Default("ConnectionMap.Default", -1);

    }

    protected static class ConnectionMap_Default
        extends ConnectionStateMachineState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected ConnectionMap_Default(String name, int id)
        {
            super (name, id);
        }

        protected void connect(ConnectionStateMachineContext context)
        {
            ConnectionStateMachine ctxt = context.getOwner();

            ConnectionStateMachineState endState = context.getState();

            context.clearState();
            try
            {
                ctxt.defaultCallback();
            }
            finally
            {
                context.setState(endState);
            }
            return;
        }

        protected void connected(ConnectionStateMachineContext context)
        {
            ConnectionStateMachine ctxt = context.getOwner();

            ConnectionStateMachineState endState = context.getState();

            context.clearState();
            try
            {
                ctxt.defaultCallback();
            }
            finally
            {
                context.setState(endState);
            }
            return;
        }

        protected void disconnect(ConnectionStateMachineContext context)
        {
            ConnectionStateMachine ctxt = context.getOwner();

            ConnectionStateMachineState endState = context.getState();

            context.clearState();
            try
            {
                ctxt.defaultCallback();
            }
            finally
            {
                context.setState(endState);
            }
            return;
        }

        protected void ping(ConnectionStateMachineContext context)
        {
            ConnectionStateMachine ctxt = context.getOwner();

            ConnectionStateMachineState endState = context.getState();

            context.clearState();
            try
            {
                ctxt.defaultCallback();
            }
            finally
            {
                context.setState(endState);
            }
            return;
        }

        protected void pong(ConnectionStateMachineContext context)
        {
            ConnectionStateMachine ctxt = context.getOwner();

            ConnectionStateMachineState endState = context.getState();

            context.clearState();
            try
            {
                ctxt.defaultCallback();
            }
            finally
            {
                context.setState(endState);
            }
            return;
        }

        protected void send(ConnectionStateMachineContext context)
        {
            ConnectionStateMachine ctxt = context.getOwner();

            ConnectionStateMachineState endState = context.getState();

            context.clearState();
            try
            {
                ctxt.defaultCallback();
            }
            finally
            {
                context.setState(endState);
            }
            return;
        }

        protected void receive(ConnectionStateMachineContext context)
        {
            ConnectionStateMachine ctxt = context.getOwner();

            ConnectionStateMachineState endState = context.getState();

            context.clearState();
            try
            {
                ctxt.defaultCallback();
            }
            finally
            {
                context.setState(endState);
            }
            return;
        }

        protected void acknolege(ConnectionStateMachineContext context)
        {
            ConnectionStateMachine ctxt = context.getOwner();

            ConnectionStateMachineState endState = context.getState();

            context.clearState();
            try
            {
                ctxt.defaultCallback();
            }
            finally
            {
                context.setState(endState);
            }
            return;
        }
    //-----------------------------------------------------------
    // Member data.
    //
    }

    private static final class ConnectionMap_Disconnected
        extends ConnectionMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ConnectionMap_Disconnected(String name, int id)
        {
            super (name, id);
        }

        protected void connect(ConnectionStateMachineContext context)
        {
            ConnectionStateMachine ctxt = context.getOwner();

            if ( ctxt.connectingCallback() == true )
            {

                (context.getState()).Exit(context);
                // No actions.
                context.setState(ConnectionMap.Connecting);
                (context.getState()).Entry(context);
            }
            else if ( ctxt.connectingCallback() == false )
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.disconnectingCallback();
                }
                finally
                {
                    context.setState(ConnectionMap.Disconnected);
                    (context.getState()).Entry(context);
                }
            }            else
            {
                super.connect(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class ConnectionMap_Connecting
        extends ConnectionMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ConnectionMap_Connecting(String name, int id)
        {
            super (name, id);
        }

        protected void connected(ConnectionStateMachineContext context, Message msg)
        {
            ConnectionStateMachine ctxt = context.getOwner();

            if ( ctxt.connectedCallback(msg) == true )
            {

                (context.getState()).Exit(context);
                // No actions.
                context.setState(ConnectionMap.Connected);
                (context.getState()).Entry(context);
            }
            else if ( ctxt.connectedCallback(msg) == false )
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.disconnectingCallback();
                }
                finally
                {
                    context.setState(ConnectionMap.Disconnected);
                    (context.getState()).Entry(context);
                }
            }            else
            {
                super.connected(context, msg);
            }

            return;
        }

        protected void disconnect(ConnectionStateMachineContext context)
        {
            ConnectionStateMachine ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.disconnectingCallback();
            }
            finally
            {
                context.setState(ConnectionMap.Disconnected);
                (context.getState()).Entry(context);
            }
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class ConnectionMap_Connected
        extends ConnectionMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ConnectionMap_Connected(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(ConnectionStateMachineContext context)
            {
                ConnectionStateMachine ctxt = context.getOwner();

            ctxt.startTimer();
            return;
        }

        protected void Exit(ConnectionStateMachineContext context)
            {
            ConnectionStateMachine ctxt = context.getOwner();

            ctxt.stopTimer();
            return;
        }

        protected void acknolege(ConnectionStateMachineContext context, Message msg)
        {
            ConnectionStateMachine ctxt = context.getOwner();

            if ( ctxt.acknolegeCallback(msg) == true )
            {

                // No actions.
            }
            else if ( ctxt.acknolegeCallback(msg) == false )
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.disconnectingCallback();
                }
                finally
                {
                    context.setState(ConnectionMap.Disconnected);
                    (context.getState()).Entry(context);
                }
            }            else
            {
                super.acknolege(context, msg);
            }

            return;
        }

        protected void disconnect(ConnectionStateMachineContext context)
        {
            ConnectionStateMachine ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.disconnectingCallback();
            }
            finally
            {
                context.setState(ConnectionMap.Disconnected);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void ping(ConnectionStateMachineContext context, Message msg)
        {
            ConnectionStateMachine ctxt = context.getOwner();

            if ( ctxt.pingCallback(msg) == true )
            {

                // No actions.
            }
            else if ( ctxt.pingCallback(msg) == false )
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.disconnectingCallback();
                }
                finally
                {
                    context.setState(ConnectionMap.Disconnected);
                    (context.getState()).Entry(context);
                }
            }            else
            {
                super.ping(context, msg);
            }

            return;
        }

        protected void pong(ConnectionStateMachineContext context, Message msg)
        {
            ConnectionStateMachine ctxt = context.getOwner();

            if ( ctxt.pongCallback(msg) == true )
            {

                // No actions.
            }
            else if ( ctxt.pongCallback(msg) == false )
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.disconnectingCallback();
                }
                finally
                {
                    context.setState(ConnectionMap.Disconnected);
                    (context.getState()).Entry(context);
                }
            }            else
            {
                super.pong(context, msg);
            }

            return;
        }

        protected void receive(ConnectionStateMachineContext context, Message msg)
        {
            ConnectionStateMachine ctxt = context.getOwner();

            if ( ctxt.receiveCallback(msg) == true )
            {

                // No actions.
            }
            else if ( ctxt.receiveCallback(msg) == false )
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.disconnectingCallback();
                }
                finally
                {
                    context.setState(ConnectionMap.Disconnected);
                    (context.getState()).Entry(context);
                }
            }            else
            {
                super.receive(context, msg);
            }

            return;
        }

        protected void send(ConnectionStateMachineContext context, Message msg)
        {
            ConnectionStateMachine ctxt = context.getOwner();

            if ( ctxt.sendCallback(msg) == true )
            {

                // No actions.
            }
            else if ( ctxt.sendCallback(msg) == false )
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.disconnectingCallback();
                }
                finally
                {
                    context.setState(ConnectionMap.Disconnected);
                    (context.getState()).Entry(context);
                }
            }            else
            {
                super.send(context, msg);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
