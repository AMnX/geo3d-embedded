class Message
{
	unsigned int(8) _type;

%.j{
    public static final int MESSAGE_TYPE = 0;

    public Message() {
	_type = MESSAGE_TYPE;
    }

    public Message(int type) {
	_type = type;
    }

    public int getType() {
	return _type;
    }

    public void setType(int type) {
	_type = type;
    }

    public String toString() {
	return " type = " + _type;
    }

    public static String toHexaString(byte[] data) {
	byte[] buffer = new byte[data.length * 2];

	for (int i = 0; i < data.length; i++) {
	    int rValue = data[i] & 0x0000000F;
	    int lValue = (data[i] >> 4) & 0x0000000F;
	    buffer[i * 2] = (byte) ((lValue > 9) ? lValue + 0x37
		    : lValue + 0x30);
	    buffer[i * 2 + 1] = (byte) ((rValue > 9) ? rValue + 0x37
		    : rValue + 0x30);
	}
	return new String(buffer);
    }

    public static byte[] fromHexaString(String hexaString) {
	byte[] buffer = hexaString.getBytes();
	byte[] data = new byte[buffer.length / 2];
	for (int i = 0; i < data.length; i++) {
	    int index = i * 2;
	    int rValue = (buffer[i * 2] > 0x39) ? buffer[index] - 0x37
		    : buffer[index] - 0x30;
	    int lValue = (buffer[i * 2 + 1] > 0x39) ? buffer[index + 1] - 0x37
		    : buffer[index + 1] - 0x30;
	    data[i] = (byte) (((rValue << 4) & 0xF0) | (lValue & 0x0F));

	}
	return data;
    }

    public void put(OutputStream out) throws Exception {
	OutputBitstream bs = new OutputBitstream(out);
	put(bs);
	bs.flushbits();
    }

    public static class DefaultMessageFactory extends MessageFactory {

	protected Message get(InputStream in) throws Exception {
	    InputBitstream bs = new InputBitstream(in);
	    Message message = new Message();
	    message.get(bs);

	    return message;
	}

    }

    static {
	MessageFactory.factories.put(new Integer(MESSAGE_TYPE),
		new DefaultMessageFactory());
    }
%.j}
}
	
// 21 octets
class C_CNX extends Message
{
	int(32) _longitude;
	int(32) _latitude;
	%pragma array=12
	unsigned char(8) _source[12];
	
%.j{
	public static final int MESSAGE_TYPE = 1;


	public C_CNX() {
	super(MESSAGE_TYPE);
    }

    public C_CNX(int longitude, int latitude, String source) {
	super(MESSAGE_TYPE);
	_longitude = longitude;
	_latitude = latitude;
	setSource(source);
    }


    public int getLongitude() {
	return _longitude;
    }

    public void setLongitude(int longitude) {
	_longitude = longitude;
    }

    public int getLatitude() {
	return _latitude;
    }

    public void setLatitude(int latitude) {
	_latitude = latitude;
    }

	public String getSource() {
        return new String(_source);
    }

    public void setSource(String source) {
	if (source != null) {
	    int end = Math.min(source.length(), 12);
	    char[] value = source.substring(0, end).toCharArray();
	    for (int i = 0; i < end; i++) {
		_source[i] = value[i];
	    }
	}
    }

    public String toString() {
	return "connect: " + super.toString() + " lon = " + _longitude + " lat = " + _latitude + " src = " +  getSource();
    }

	public static class DefaultMessageFactory extends MessageFactory {

		protected Message get(InputStream in) throws Exception {
			InputBitstream bs = new InputBitstream(in);
			Message message = new C_CNX();
			message.get(bs);
			
			return message;
		}
	}

	static {
		MessageFactory.factories.put(new Integer(MESSAGE_TYPE),
				new DefaultMessageFactory());
	}
	%.j}	
}

// 1 octets
class S_CNX extends Message
{
	
%.j{
	public static final int MESSAGE_TYPE = 2;
	
	public S_CNX() {
	super(MESSAGE_TYPE);
    }

	public String toString() {
		return "connect: " + super.toString();
	}

	public static class DefaultMessageFactory extends MessageFactory {

		protected Message get(InputStream in) throws Exception {
			InputBitstream bs = new InputBitstream(in);
			Message message = new S_CNX();
			message.get(bs);
			
			return message;
		}
	}

	static {
		MessageFactory.factories.put(new Integer(MESSAGE_TYPE),
				new DefaultMessageFactory());
	}
	%.j}	
}

// 1 octets
class C_DCNX extends Message
{
	int(32) _longitude;
	int(32) _latitude;
	
%.j{
	public static final int MESSAGE_TYPE = 3;


	public C_DCNX() {
	super(MESSAGE_TYPE);
    }

    public C_DCNX(int longitude, int latitude) {
	super(MESSAGE_TYPE);
	_longitude = longitude;
	_latitude = latitude;
    }


    public int getLongitude() {
	return _longitude;
    }

    public void setLongitude(int longitude) {
	_longitude = longitude;
    }

    public int getLatitude() {
	return _latitude;
    }

    public void setLatitude(int latitude) {
	_latitude = latitude;
    }

    
    public String toString() {
	return "disconnect: " + super.toString() + " lon = " + _longitude + " lat = " + _latitude;
    }

	public static class DefaultMessageFactory extends MessageFactory {

		protected Message get(InputStream in) throws Exception {
			InputBitstream bs = new InputBitstream(in);
			Message message = new C_DCNX();
			message.get(bs);
			
			return message;
		}
	}

	static {
		MessageFactory.factories.put(new Integer(MESSAGE_TYPE),
				new DefaultMessageFactory());
	}
	%.j}	
}

// 1 octets
class S_DCNX extends Message
{
	
%.j{
	public static final int MESSAGE_TYPE = 4;

	public S_DCNX() {
	super(MESSAGE_TYPE);
    }
    
	public String toString() {
		return "disconnect: " + super.toString();
	}

	public static class DefaultMessageFactory extends MessageFactory {

		protected Message get(InputStream in) throws Exception {
			InputBitstream bs = new InputBitstream(in);
			Message message = new S_DCNX();
			message.get(bs);
			
			return message;
		}
	}

	static {
		MessageFactory.factories.put(new Integer(MESSAGE_TYPE),
				new DefaultMessageFactory());
	}
	%.j}	
}

// 9 octets
class PING extends Message
{
	int(32) _longitude;
	int(32) _latitude;
	
%.j{
	public static final int MESSAGE_TYPE = 5;

    public PING() {
	this(0, 0);
    }

    public PING(int longitude, int latitude) {
	super(MESSAGE_TYPE);
	_longitude = longitude;
	_latitude = latitude;
    }

    public int getLongitude() {
	return _longitude;
    }

    public void setLongitude(int longitude) {
	_longitude = longitude;
    }

    public int getLatitude() {
	return _latitude;
    }

    public void setLatitude(int latitude) {
	_latitude = latitude;
    }

    public String toString() {
	return "ping: " + super.toString() + " lon = " + _longitude + " lat = " + _latitude;
    }

    public static class DefaultMessageFactory extends MessageFactory {

	protected Message get(InputStream in) throws Exception {
	    InputBitstream bs = new InputBitstream(in);
	    Message message = new PING();
	    message.get(bs);
	   
	    return message;
	}
    }

    static {
	MessageFactory.factories.put(new Integer(MESSAGE_TYPE),
		new DefaultMessageFactory());
    }
	%.j}	
}

// 1 octets
class PONG extends Message
{
	
%.j{
	public static final int MESSAGE_TYPE = 6;
	
	public PONG() {
	super(MESSAGE_TYPE);
    }
    
	public String toString() {
		return "pong: " + super.toString();
	}

	public static class DefaultMessageFactory extends MessageFactory {

		protected Message get(InputStream in) throws Exception {
			InputBitstream bs = new InputBitstream(in);
			Message message = new PONG();
			message.get(bs);
		
			return message;
		}
	}

	static {
		MessageFactory.factories.put(new Integer(MESSAGE_TYPE),
				new DefaultMessageFactory());
	}
%.j}	
}

// 23+n octets
class C_MSG extends Message
{
	int(32) _longitude;
	int(32) _latitude;
	%pragma array=12
	unsigned char(8) _dest[12];
	unsigned int(16) _length;
	%g.j{_value = new int[_length]; %g.j}
	%pragma array=1
	unsigned int(8) _value[_length];
	
%.j{
   public static final int MESSAGE_TYPE = 7;

    public C_MSG() {
	super(MESSAGE_TYPE);
    }

    public C_MSG(int longitude, int latitude, String dest, byte[] value) {
	super(MESSAGE_TYPE);
	_longitude = longitude;
	_latitude = latitude;
	setDestination(dest);
	setValue(value);
    }

    public int getLongitude() {
	return _longitude;
    }

    public void setLongitude(int longitude) {
	_longitude = longitude;
    }

    public int getLatitude() {
	return _latitude;
    }

    public void setLatitude(int latitude) {
	_latitude = latitude;
    }

    public String getDestination() {
	return new String(_dest);
    }

    public void setDestination(String dest) {
	if (dest != null) {
	    int end = Math.min(dest.length(), 12);
	    char[] value = dest.substring(0, end).toCharArray();
	    for (int i = 0; i < end; i++) {
		_dest[i] = value[i];
	    }
	}
    }

    public byte[] getValue() {
	byte[] value = new byte[_length];
	for (int i = 0; i < _length; i++) {
	    value[i] = (byte) _value[i];
	}
	return value;
    }

    public void setValue(byte[] value) {
	if (value != null) {
	    _length = value.length;
	    _value = new int[_length];
	    for (int i = 0; i < _length; i++) {
		_value[i] = value[i];
	    }
	}
    }

    public String toString() {
	return "message: " + super.toString() + " lon = " + _longitude
		+ " lat = " + _latitude + " dest = " + getDestination()
		+ " msg = " + toHexaString(getValue());
    }

    public static class DefaultMessageFactory extends MessageFactory {

	protected Message get(InputStream in) throws Exception {
	    InputBitstream bs = new InputBitstream(in);
	    Message message = new C_MSG();
	    message.get(bs);

	    return message;
	}
    }

    static {
	MessageFactory.factories.put(new Integer(MESSAGE_TYPE),
		new DefaultMessageFactory());
    }
%.j}	
}

// 9 octets
class S_ACK extends Message
{
	
%.j{
	public static final int MESSAGE_TYPE = 8;
	
	public S_ACK() {
	super(MESSAGE_TYPE);
    }
    
	public String toString() {
		return "acknolege: " + super.toString();
	}

	public static class DefaultMessageFactory extends MessageFactory {

		protected Message get(InputStream in) throws Exception {
			InputBitstream bs = new InputBitstream(in);
			Message message = new S_ACK();
			message.get(bs);
			
			return message;
		}
	}

	static {
		MessageFactory.factories.put(new Integer(MESSAGE_TYPE),
				new DefaultMessageFactory());
	}
	%.j}	
}

// 15+n octets 
class S_MSG extends Message
{
	%pragma array=12
	unsigned char(8) _dest[12];
	unsigned int(16) _length;
	%g.j{_value = new int[_length]; %g.j}
	%pragma array=1
	unsigned int(8) _value[_length];
	
%.j{
	public static final int MESSAGE_TYPE = 9;

    public S_MSG() {
	super(MESSAGE_TYPE);
    }

    public S_MSG(String dest, byte[] value) {
	super(MESSAGE_TYPE);
	setDestination(dest);
	setValue(value);
    }

    public String getDestination() {
	return new String(_dest);
    }

    public void setDestination(String dest) {
	if (dest != null) {
	    int end = Math.min(dest.length(), 12);
	    char[] value = dest.substring(0, end).toCharArray();
	    for (int i = 0; i < end; i++) {
		_dest[i] = value[i];
	    }
	}
    }

     public byte[] getValue() {
	byte[] value = new byte[_length];
	for (int i = 0; i < _length; i++) {
	    value[i] = (byte) _value[i];
	}
	return value;
    }

    public void setValue(byte[] value) {
	if (value != null) {
	    _length = value.length;
	    _value = new int[_length];
	    for (int i = 0; i < _length; i++) {
		_value[i] = value[i];
	    }
	}
    }

    public String toString() {
	return "message: " + super.toString() + " dest = " + getDestination() + " msg = " + toHexaString(getValue());
    }
	public static class DefaultMessageFactory extends MessageFactory {

		protected Message get(InputStream in) throws Exception {
			InputBitstream bs = new InputBitstream(in);
			Message message = new S_MSG();
			message.get(bs);
			
			return message;
		}
	}

	static {
		MessageFactory.factories.put(new Integer(MESSAGE_TYPE),
				new DefaultMessageFactory());
	}
	%.j}	
}

// 9 octets
class C_ACK extends Message
{
	int(32) _longitude;
	int(32) _latitude;
	
%.j{
	public static final int MESSAGE_TYPE = 10;

	public C_ACK() {
	super(MESSAGE_TYPE);
    }

    public C_ACK(int longitude, int latitude) {
	super(MESSAGE_TYPE);
	_longitude = longitude;
	_latitude = latitude;

    }

    public int getLongitude() {
	return _longitude;
    }

    public void setLongitude(int longitude) {
	_longitude = longitude;
    }

    public int getLatitude() {
	return _latitude;
    }

    public void setLatitude(int latitude) {
	_latitude = latitude;
    }

    public String toString() {
	return "acklnolege: " + super.toString() + " lon = " + _longitude
		+ " lat = " + _latitude;
    }


	public static class DefaultMessageFactory extends MessageFactory {

		protected Message get(InputStream in) throws Exception {
			InputBitstream bs = new InputBitstream(in);
			Message message = new C_ACK();
			message.get(bs);
			
			return message;
		}
	}

	static {
		MessageFactory.factories.put(new Integer(MESSAGE_TYPE),
				new DefaultMessageFactory());
	}
	%.j}	
}

