/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : ZonesManagerContext.sm
 */

package org.angolight.bo.states;


public class ZonesManagerContext
    extends statemap.FSMContext
{
//---------------------------------------------------------------
// Member methods.
//

    public ZonesManagerContext(ZonesManager owner)
    {
        super (ANGO.ZoneStable);

        _owner = owner;
    }

    public ZonesManagerContext(ZonesManager owner, ZonesManagerState initState)
    {
        super (initState);

        _owner = owner;
    }

    public synchronized void enterStartState()
    {
        getState().Entry(this);
        return;
    }

    public synchronized void onKinetic()
    {
        _transition = "onKinetic";
        getState().onKinetic(this);
        _transition = "";
        return;
    }

    public synchronized void onTimer()
    {
        _transition = "onTimer";
        getState().onTimer(this);
        _transition = "";
        return;
    }

    public ZonesManagerState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((ZonesManagerState) _state);
    }

    protected ZonesManager getOwner()
    {
        return (_owner);
    }

    public void setOwner(ZonesManager owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private ZonesManager _owner;

    public static abstract class ZonesManagerState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected ZonesManagerState(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(ZonesManagerContext context) {}
        protected void Exit(ZonesManagerContext context) {}

        protected void onKinetic(ZonesManagerContext context)
        {
            Default(context);
        }

        protected void onTimer(ZonesManagerContext context)
        {
            Default(context);
        }

        protected void Default(ZonesManagerContext context)
        {
            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //
    }

    /* package */ static abstract class ANGO
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //
        public static final ANGO_ZoneStable ZoneStable =
            new ANGO_ZoneStable("ANGO.ZoneStable", 0);
        public static final ANGO_ZoneTransitoire ZoneTransitoire =
            new ANGO_ZoneTransitoire("ANGO.ZoneTransitoire", 1);
        public static final ANGO_VMax VMax =
            new ANGO_VMax("ANGO.VMax", 2);
        public static final ANGO_VMin VMin =
            new ANGO_VMin("ANGO.VMin", 3);
        private static final ANGO_Default Default =
            new ANGO_Default("ANGO.Default", -1);

    }

    protected static class ANGO_Default
        extends ZonesManagerState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected ANGO_Default(String name, int id)
        {
            super (name, id);
        }
    //-----------------------------------------------------------
    // Member data.
    //
    }

    private static final class ANGO_ZoneStable
        extends ANGO_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ANGO_ZoneStable(String name, int id)
        {
            super (name, id);
        }

        protected void onKinetic(ZonesManagerContext context)
        {
            ZonesManager ctxt = context.getOwner();

            if ( ctxt.getSpeed() > ctxt.getVmaxUp() )
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.debug("zs1");
                    ctxt.zoneVMax();
                }
                finally
                {
                    context.setState(ANGO.VMax);
                    (context.getState()).Entry(context);
                }
            }
            else if ( ctxt.getSpeed() < ctxt.getVminDown() )
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.debug("zs2");
                    ctxt.zoneDown();
                }
                finally
                {
                    context.setState(ANGO.VMin);
                    (context.getState()).Entry(context);
                }
            }
            else if ( (ctxt.getNextZone() - ctxt.getCurrentZone()) == 0)
            {
                ZonesManagerState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.debug("zs3");
                }
                finally
                {
                    context.setState(endState);
                }
            }
            else if ( (ctxt.getNextZone() - ctxt.getCurrentZone()) == -1)
            {
                ZonesManagerState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.debug("zs4");
                    ctxt.zoneDown();
                }
                finally
                {
                    context.setState(endState);
                }
            }
            else if ( (ctxt.getNextZone() - ctxt.getCurrentZone()) == 1)
            {
                ZonesManagerState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.debug("zs5");
                    ctxt.zoneUp();
                }
                finally
                {
                    context.setState(endState);
                }
            }
            else if ( (ctxt.getNextZone() - ctxt.getCurrentZone()) > 1)
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.debug("zs6");
                    ctxt.zoneUp();
                    ctxt.resetTimer();
                }
                finally
                {
                    context.setState(ANGO.ZoneTransitoire);
                    (context.getState()).Entry(context);
                }
            }
            else if ( (ctxt.getNextZone() - ctxt.getCurrentZone()) < -1)
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.debug("zs7");
                    ctxt.zoneDown();
                    ctxt.resetTimer();
                }
                finally
                {
                    context.setState(ANGO.ZoneTransitoire);
                    (context.getState()).Entry(context);
                }
            }            else
            {
                super.onKinetic(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class ANGO_ZoneTransitoire
        extends ANGO_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ANGO_ZoneTransitoire(String name, int id)
        {
            super (name, id);
        }

        protected void Exit(ZonesManagerContext context)
            {
            ZonesManager ctxt = context.getOwner();

            ctxt.killTimer();
            return;
        }

        protected void onKinetic(ZonesManagerContext context)
        {
            ZonesManager ctxt = context.getOwner();

            if ( ctxt.getSpeed() > ctxt.getVmaxUp() )
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.debug("zt3");
                    ctxt.zoneVMax();
                }
                finally
                {
                    context.setState(ANGO.VMax);
                    (context.getState()).Entry(context);
                }
            }
            else if ( ctxt.getSpeed() < ctxt.getVminDown() )
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.debug("zt4");
                    ctxt.zoneDown();
                }
                finally
                {
                    context.setState(ANGO.VMin);
                    (context.getState()).Entry(context);
                }
            }
            else
            {
                ZonesManagerState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.debug("zt10");
                }
                finally
                {
                    context.setState(endState);
                }
            }

            return;
        }

        protected void onTimer(ZonesManagerContext context)
        {
            ZonesManager ctxt = context.getOwner();

            if ( ctxt.getSpeed() > ctxt.getVmaxUp() )
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.debug("zt1");
                    ctxt.zoneVMax();
                }
                finally
                {
                    context.setState(ANGO.VMax);
                    (context.getState()).Entry(context);
                }
            }
            else if ( ctxt.getSpeed() < ctxt.getVminDown() )
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.debug("zt2");
                    ctxt.zoneDown();
                }
                finally
                {
                    context.setState(ANGO.VMin);
                    (context.getState()).Entry(context);
                }
            }
            else if ( (ctxt.getNextZone() - ctxt.getCurrentZone()) == 0)
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.debug("zt5");
                }
                finally
                {
                    context.setState(ANGO.ZoneStable);
                    (context.getState()).Entry(context);
                }
            }
            else if ( (ctxt.getNextZone() - ctxt.getCurrentZone()) == -1)
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.debug("zt6");
                    ctxt.zoneDown();
                }
                finally
                {
                    context.setState(ANGO.ZoneStable);
                    (context.getState()).Entry(context);
                }
            }
            else if ( (ctxt.getNextZone() - ctxt.getCurrentZone()) == 1)
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.debug("zt7");
                    ctxt.zoneUp();
                }
                finally
                {
                    context.setState(ANGO.ZoneStable);
                    (context.getState()).Entry(context);
                }
            }
            else if ( (ctxt.getNextZone() - ctxt.getCurrentZone()) > 1)
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.debug("zt8");
                    ctxt.zoneUp();
                    ctxt.resetTimer();
                }
                finally
                {
                    context.setState(ANGO.ZoneTransitoire);
                    (context.getState()).Entry(context);
                }
            }
            else if ( (ctxt.getNextZone() - ctxt.getCurrentZone()) < -1)
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.debug("zt9");
                    ctxt.zoneDown();
                    ctxt.resetTimer();
                }
                finally
                {
                    context.setState(ANGO.ZoneTransitoire);
                    (context.getState()).Entry(context);
                }
            }            else
            {
                super.onTimer(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class ANGO_VMax
        extends ANGO_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ANGO_VMax(String name, int id)
        {
            super (name, id);
        }

        protected void onKinetic(ZonesManagerContext context)
        {
            ZonesManager ctxt = context.getOwner();

            if ( ctxt.getSpeed() < ctxt.getVmaxDown() )
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.debug("vmax1");
                    ctxt.zoneInit();
                }
                finally
                {
                    context.setState(ANGO.ZoneStable);
                    (context.getState()).Entry(context);
                }
            }
            else
            {
                ZonesManagerState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.debug("vmax2");
                }
                finally
                {
                    context.setState(endState);
                }
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class ANGO_VMin
        extends ANGO_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ANGO_VMin(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(ZonesManagerContext context)
            {
                ZonesManager ctxt = context.getOwner();

            ctxt.resetTimer();
            return;
        }

        protected void Exit(ZonesManagerContext context)
            {
            ZonesManager ctxt = context.getOwner();

            ctxt.killTimer();
            return;
        }

        protected void onKinetic(ZonesManagerContext context)
        {
            ZonesManager ctxt = context.getOwner();

            if ( ctxt.getSpeed() > ctxt.getVminUp() )
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.debug("vmin1");
                    ctxt.zoneInit();
                }
                finally
                {
                    context.setState(ANGO.ZoneStable);
                    (context.getState()).Entry(context);
                }
            }
            else
            {
                ZonesManagerState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.debug("vmin4");
                    ctxt.zoneDown();
                }
                finally
                {
                    context.setState(endState);
                }
            }

            return;
        }

        protected void onTimer(ZonesManagerContext context)
        {
            ZonesManager ctxt = context.getOwner();

            if ( ctxt.getSpeed() < ctxt.getVminDown() )
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.debug("vmin2");
                    ctxt.zoneDown();
                }
                finally
                {
                    context.setState(ANGO.VMin);
                    (context.getState()).Entry(context);
                }
            }
            else
            {
                ZonesManagerState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.debug("vmin3");
                    ctxt.zoneDown();
                }
                finally
                {
                    context.setState(endState);
                }
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
