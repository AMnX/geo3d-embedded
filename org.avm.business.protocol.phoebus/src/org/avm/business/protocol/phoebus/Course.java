/* @flavorc
 *
 * Course.java
 * 
 * This file was automatically generated by flavorc
 * from the source file:
 *     'phoebus.fl'
 *
 * For information on flavorc, visit the Flavor Web site at:
 *     http://www.ee.columbia.edu/flavor
 *
 * -- Do not edit by hand --
 *
 */

package org.avm.business.protocol.phoebus;
import java.io.IOException;

import flavor.IBitstream;
import flavor.MapResult;

public class Course {
    int _course;
    int _depart;
    int _ligne;
    int _amplitude;
    int _chevauchement;
    int _longueur;
    Horaire _horaires[] = new Horaire[256];
    
	public Course() {
		super();
    }

    public Course(int course, int depart, int ligne, int amplitude,
	    int chevauchement, Horaire[] horaires) {
		super();
		_course = course;
		_depart = depart;
		_ligne = ligne;
		_amplitude = amplitude;
		_chevauchement = chevauchement;
		_longueur = horaires.length;
		_horaires = horaires;
    }

    public int getCourse() {
		return _course;
    }

    public int getDepart() {
	return _depart;
    }

    public int getLigne() {
		return _ligne;
    }

    public int getAmplitude() {
		return _amplitude;
    }

    public int getChevauchement() {
		return _chevauchement;
    }

    public void setCourse(int course) {
		_course = course;
    }

    public void setDepart(int depart) {
		_depart = depart;
    }

    public void setLigne(int ligne) {
		_ligne = ligne;
    }

    public void setAmplitude(int amplitude) {
		_amplitude = amplitude;
    }

    public void setChevauchement(int chevauchement) {
		_chevauchement = chevauchement;
    }

	public Horaire[] getHoraires() {
		Horaire[] horaires = new Horaire[_longueur];
		for (int i = 0; i < horaires.length; i++) {
		    horaires[i] = _horaires[i];
		}
		return horaires;
    }

    public void setHoraires(Horaire[] horaires) {
		for (int i = 0; i < horaires.length; i++) {
		    _horaires[i] = horaires[i];
		}
		_longueur = horaires.length;
    }
    
    public String toString() {
		StringBuffer sb = new StringBuffer();
		sb.append(" [course " + _course + " depart " + _depart + " ligne "
			+ _ligne + " amplitude " + _amplitude + " _chevauchement "
			+ _chevauchement + " longueur " + _longueur);
		for (int i = 0; i < _longueur; i++) {
		    sb.append(" " + _horaires[i].toString() + " ");
		}
		sb.append("]");
		return sb.toString();
    }

	

    public int get(IBitstream _F_bs) throws IOException {
        int _F_ret = 0;
        MapResult _F_mr;
        int _F_dim0, _F_dim0_end;
        _course = _F_bs.getbits(32);
        _depart = _F_bs.getbits(17);
        _ligne = _F_bs.getbits(32);
        _amplitude = _F_bs.getbits(8);
        _chevauchement = _F_bs.getbits(7);
        _longueur = _F_bs.getbits(8);
        _F_dim0_end = _longueur;
        for (_F_dim0 = 0; _F_dim0 < _F_dim0_end; _F_dim0++) {
            _horaires[_F_dim0] = new Horaire();
            _F_ret += _horaires[_F_dim0].get(_F_bs);
        }
        return _F_ret;
    }

    public int put(IBitstream _F_bs) throws IOException {
        int _F_ret = 0;
        MapResult _F_mr;
        int _F_dim0, _F_dim0_end;
        _F_bs.putbits(_course, 32);
        _F_bs.putbits(_depart, 17);
        _F_bs.putbits(_ligne, 32);
        _F_bs.putbits(_amplitude, 8);
        _F_bs.putbits(_chevauchement, 7);
        _F_bs.putbits(_longueur, 8);
        _F_dim0_end = _longueur;
        for (_F_dim0 = 0; _F_dim0 < _F_dim0_end; _F_dim0++) {
            _F_ret += _horaires[_F_dim0].put(_F_bs);
        }
        return _F_ret;
    }
}
