/* @flavorc
 *
 * Entete.java
 * 
 * This file was automatically generated by flavorc
 * from the source file:
 *     'phoebus.fl'
 *
 * For information on flavorc, visit the Flavor Web site at:
 *     http://www.ee.columbia.edu/flavor
 *
 * -- Do not edit by hand --
 *
 */

package org.avm.business.protocol.phoebus;
import java.io.IOException;

import flavor.IBitstream;
import flavor.MapResult;

public class Entete {
    int _protocole;
    int _type;
    int _version;
    Identite _source;
    Identite _destination;
    long _id;
    ChampsOptionnels _champs;
    Horodate _date;
    Position _position;
    Service _service;
    Reference _reference;
    Progression _progression;
    Programmation _programmation;
    Anomalie _anomalie;
    Options _options;
    
	public static final int PROTOCOL_ID = 0x0c;

	public static final String PROTOCOL_NAME = "PHOEBUS_NG";

	protected static int _count;

	public Entete() {
		_protocole = PROTOCOL_ID;
		_source = new Identite();
		_destination = new Identite();
		_champs = new ChampsOptionnels();
		_date = new Horodate();

		try {
			byte[] value = _date.toByteArray();
			_id = 0;
			for (int i = 0; i < value.length; i++) {
				_id |= (value[i] & 0xff);
				_id = _id << 8;
			}
			_id |= (_count++ % 256);

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	public Entete(int protocole, int type, int version, Identite source,
			Identite destination, long id, ChampsOptionnels champs,
			Horodate date, Position position, Service service,
			Reference reference, Progression progression,
			Programmation programmation, Anomalie anomalie, Options options) {

		_protocole = protocole;
		_type = type;
		_version = version;
		_source = source;
		_destination = destination;
		_id = id;
		_champs = champs;
		_date = date;
		_position = position;
		_service = service;
		_reference = reference;
		_progression = progression;
		_programmation = programmation;
		_anomalie = anomalie;
		_options = options;
	}

	public Anomalie getAnomalie() {
		return _anomalie;
	}

	public void setAnomalie(Anomalie anomalie) {
		_anomalie = anomalie;
	}

	public ChampsOptionnels getChamps() {
		return _champs;
	}

	public void setChamps(ChampsOptionnels champs) {
		_champs = champs;
	}

	public Horodate getDate() {
		return _date;
	}

	public void setDate(Horodate date) {
		_date = date;
	}

	public Identite getDestination() {
		return _destination;
	}

	public void setDestination(Identite destination) {
		_destination = destination;
	}

	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_id = id;
	}

	public Options getOptions() {
		return _options;
	}

	public void setOptions(Options options) {
		_options = options;
	}

	public Position getPosition() {
		return _position;
	}

	public void setPosition(Position position) {
		_position = position;
	}

	public Programmation getProgrammation() {
		return _programmation;
	}

	public void setProgrammation(Programmation programmation) {
		_programmation = programmation;
	}

	public Progression getProgression() {
		return _progression;
	}

	public void setProgression(Progression progression) {
		_progression = progression;
	}

	public int getProtocole() {
		return _protocole;
	}

	public void setProtocole(int protocole) {
		_protocole = protocole;
	}

	public Reference getReference() {
		return _reference;
	}

	public void setReference(Reference reference) {
		_reference = reference;
	}

	public Service getService() {
		return _service;
	}

	public void setService(Service service) {
		_service = service;
	}

	public Identite getSource() {
		return _source;
	}

	public void setSource(Identite source) {
		_source = source;
	}

	public int getType() {
		return _type;
	}

	public void setType(int type) {
		_type = type;
	}

    public int getVersion() {
        return _version;
    }

    public void setVersion(int version) {
        _version = version;
    }
	
	public String toString() {
		return "[protocol "
				+ _protocole
				+ " type "
				+ _type
				+ " version "
				+ _version
				+ " source: "
				+ _source
				+ " destination: "
				+ _destination
				+ " id "
				+ _id
				+ " champs optionnels: "
				+ _champs
				+ ((_date != null) ? " date: " + _date : "")
				+ ((_position != null) ? " position: " + _position : "")
				+ ((_service != null) ? " service: " + _service : "")
				+ ((_reference != null) ? " reference: " + _reference : "")
				+ ((_progression != null) ? " progression: " + _progression : "")
				+ ((_programmation != null) ? " programmation: " + _programmation
						: "")
				+ ((_anomalie != null) ? " anomalie: " + _anomalie : "")
				+ ((_options != null) ? " options: " + _options : "")
				+ "]";
	}
	

    public int get(IBitstream _F_bs) throws IOException {
        int _F_ret = 0;
        MapResult _F_mr;
        _protocole = _F_bs.getbits(8);
        _type = _F_bs.getbits(8);
        _version = _F_bs.getbits(32);
        _source = new Identite();
        _F_ret += _source.get(_F_bs);
        _destination = new Identite();
        _F_ret += _destination.get(_F_bs);
        _id = _F_bs.getlong(40);
        _champs = new ChampsOptionnels();
        _F_ret += _champs.get(_F_bs);
        if (_champs._date>0)
        {
            _date = new Horodate();
            _F_ret += _date.get(_F_bs);
        }
        
        if (_champs._position>0)
        {
            _position = new Position();
            _F_ret += _position.get(_F_bs);
        }
        
        if (_champs._service>0)
        {
            _service = new Service();
            _F_ret += _service.get(_F_bs);
        }
        
        if (_champs._reference>0)
        {
            _reference = new Reference();
            _F_ret += _reference.get(_F_bs);
        }
        
        if (_champs._progression>0)
        {
            _progression = new Progression();
            _F_ret += _progression.get(_F_bs);
        }
        
        if (_champs._programmation>0)
        {
            _programmation = new Programmation();
            _F_ret += _programmation.get(_F_bs);
        }
        
        if (_champs._anomalie>0)
        {
            _anomalie = new Anomalie();
            _F_ret += _anomalie.get(_F_bs);
        }
        
        if (_champs._options>0)
        {
            _options = new Options();
            _F_ret += _options.get(_F_bs);
        }
        
        return _F_ret;
    }

    public int put(IBitstream _F_bs) throws IOException {
        int _F_ret = 0;
        MapResult _F_mr;
        _F_bs.putbits(_protocole, 8);
        _F_bs.putbits(_type, 8);
        _F_bs.putbits(_version, 32);
        _F_ret += _source.put(_F_bs);
        _F_ret += _destination.put(_F_bs);
        _F_bs.putlong(_id, 40);
        _F_ret += _champs.put(_F_bs);
        if (_champs._date>0)
        {
            _F_ret += _date.put(_F_bs);
        }
        
        if (_champs._position>0)
        {
            _F_ret += _position.put(_F_bs);
        }
        
        if (_champs._service>0)
        {
            _F_ret += _service.put(_F_bs);
        }
        
        if (_champs._reference>0)
        {
            _F_ret += _reference.put(_F_bs);
        }
        
        if (_champs._progression>0)
        {
            _F_ret += _progression.put(_F_bs);
        }
        
        if (_champs._programmation>0)
        {
            _F_ret += _programmation.put(_F_bs);
        }
        
        if (_champs._anomalie>0)
        {
            _F_ret += _anomalie.put(_F_bs);
        }
        
        if (_champs._options>0)
        {
            _F_ret += _options.put(_F_bs);
        }
        
        return _F_ret;
    }
}
