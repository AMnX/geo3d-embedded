/* @flavorc
 *
 * MessageText.java
 * 
 * This file was automatically generated by flavorc
 * from the source file:
 *     'phoebus.fl'
 *
 * For information on flavorc, visit the Flavor Web site at:
 *     http://www.ee.columbia.edu/flavor
 *
 * -- Do not edit by hand --
 *
 */

package org.avm.business.protocol.phoebus;
import java.io.IOException;
import java.io.InputStream;
import java.util.StringTokenizer;

import org.jibx.runtime.BindingDirectory;
import org.jibx.runtime.IBindingFactory;
import org.jibx.runtime.IUnmarshallingContext;

import flavor.Bitstream;
import flavor.IBitstream;
import flavor.MapResult;

public class MessageText extends Message {
    CString _message;
    int _type;
    IntArray _affectation;
    
	public static final int MESSAGE_TYPE = 6;

	public static final String MESSAGE_NAME = "message-text";

	public MessageText() {
		super();
		_entete._type = MESSAGE_TYPE;
		_entete._champs._date = 1;
		_message = new CString();
		_affectation = new IntArray();
		_type = 0;
	}

	public String getMessage() {
		return _message.getValue();
	}

	public void setMessage(String value) {
		_message.setValue(value);
	}

	public int getType() {
		return _type;
	}

	public void setType(int type) {
		_type = type;
	}

	public IntArray getAffectation() {
		return _affectation;
	}

	public void setAffectation(IntArray affectation) {
		_affectation = affectation;
	}

	public static String serializeIntArray(IntArray values) {
		StringBuffer buffer = new StringBuffer();
		for (int i = 0; i < values._longueur; i++) {
			if (i > 0) {
				buffer.append(' ');
			}
			buffer.append(values.getValue()[i]);
		}
		return buffer.toString();
	}

	private static int[] resizeArray(int[] array, int size) {
		int[] copy = new int[size];
		System.arraycopy(array, 0, copy, 0, Math.min(array.length, size));
		return copy;
	}

	public static IntArray deserializeIntArray(String text) {
		IntArray result = new IntArray();
		int[] array = new int[256];
		int i = 0;
		for (StringTokenizer tokenizer = new StringTokenizer(text); tokenizer
				.hasMoreElements(); i++) {
			int value = Integer.parseInt((String) tokenizer.nextElement());
			array[i] = value;
		}
		result.setValue(resizeArray(array, i));

		return result;

	}

	public String toString() {
		return MESSAGE_NAME + " [" + super.toString() + "]" + " message: "
				+ _message.toString() + " type: " + _type 
				+ " affectation: " + _affectation.toString() ;
	}
	
	public static class DefaultMessageFactory extends MessageFactory {

		protected Message unmarshal(InputStream in) throws Exception {
			IBindingFactory factory = BindingDirectory
					.getFactory(MessageText.class);
			IUnmarshallingContext context = factory
					.createUnmarshallingContext();
			return (Message) context.unmarshalDocument(in, null);

		}

		protected Message get(InputStream in) throws Exception {
			Bitstream bs = new Bitstream(in);
			Message message = new MessageText();
			message.get(bs);
			bs.close();
			in.reset();
			return message;
		}

	}

	static {
		MessageFactory.factories.put(new Integer(MESSAGE_TYPE),
				new DefaultMessageFactory());
	}

	

    public int get(IBitstream _F_bs) throws IOException {
        int _F_ret = 0;
        MapResult _F_mr;
        _F_ret += super.get(_F_bs);
        _message = new CString();
        _F_ret += _message.get(_F_bs);
        _type = _F_bs.sgetbits(8);
        _affectation = new IntArray();
        _F_ret += _affectation.get(_F_bs);
        return _F_ret;
    }

    public int put(IBitstream _F_bs) throws IOException {
        int _F_ret = 0;
        MapResult _F_mr;
        _F_ret += super.put(_F_bs);
        _F_ret += _message.put(_F_bs);
        _F_bs.putbits(_type, 8);
        _F_ret += _affectation.put(_F_bs);
        return _F_ret;
    }
}
